/* tslint:disable */
/* eslint-disable */
/**
 * CE API
 * CE API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiAdminGroupBigGet200Response
 */
export interface ApiAdminGroupBigGet200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiAdminGroupBigGet200Response
     */
    'big_groups'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupBigPost200Response
 */
export interface ApiAdminGroupBigPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupBigPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupBigPostRequest
 */
export interface ApiAdminGroupBigPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupBigPostRequest
     */
    'big_group'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupDelete200Response
 */
export interface ApiAdminGroupDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupDelete200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupDeleteRequest
 */
export interface ApiAdminGroupDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupDeleteRequest
     */
    'big_group'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiAdminGroupDeleteRequest
     */
    'group_id'?: number;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupGet200Response
 */
export interface ApiAdminGroupGet200Response {
    /**
     * 
     * @type {Array<ApiAdminGroupGet200ResponseGroupsInner>}
     * @memberof ApiAdminGroupGet200Response
     */
    'groups'?: Array<ApiAdminGroupGet200ResponseGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupGet200ResponseGroupsInner
 */
export interface ApiAdminGroupGet200ResponseGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGet200ResponseGroupsInner
     */
    'big_group'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiAdminGroupGet200ResponseGroupsInner
     */
    'group_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGet200ResponseGroupsInner
     */
    'group_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGet200ResponseGroupsInner
     */
    'leader_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGet200ResponseGroupsInner
     */
    'leader_student_id'?: string;
    /**
     * 
     * @type {Array<ApiAdminGroupGet200ResponseGroupsInnerMembersInner>}
     * @memberof ApiAdminGroupGet200ResponseGroupsInner
     */
    'members'?: Array<ApiAdminGroupGet200ResponseGroupsInnerMembersInner>;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupGet200ResponseGroupsInnerMembersInner
 */
export interface ApiAdminGroupGet200ResponseGroupsInnerMembersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGet200ResponseGroupsInnerMembersInner
     */
    'member_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGet200ResponseGroupsInnerMembersInner
     */
    'member_student_id'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupGet400Response
 */
export interface ApiAdminGroupGet400Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGet400Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupGradeGet200Response
 */
export interface ApiAdminGroupGradeGet200Response {
    /**
     * 
     * @type {Array<ApiAdminGroupGradeGet200ResponseGroupGradeCommentListInner>}
     * @memberof ApiAdminGroupGradeGet200Response
     */
    'group_grade_comment_list'?: Array<ApiAdminGroupGradeGet200ResponseGroupGradeCommentListInner>;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupGradeGet200ResponseGroupGradeCommentListInner
 */
export interface ApiAdminGroupGradeGet200ResponseGroupGradeCommentListInner {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGradeGet200ResponseGroupGradeCommentListInner
     */
    'student_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiAdminGroupGradeGet200ResponseGroupGradeCommentListInner
     */
    'grade'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupGradeGet200ResponseGroupGradeCommentListInner
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupPost200Response
 */
export interface ApiAdminGroupPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupPostRequest
 */
export interface ApiAdminGroupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupPostRequest
     */
    'big_group'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiAdminGroupPostRequest
     */
    'group_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupPostRequest
     */
    'group_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupPostRequest
     */
    'leader_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupPostRequest
     */
    'leader_student_id'?: string;
    /**
     * 
     * @type {Array<ApiAdminGroupPostRequestMembersInner>}
     * @memberof ApiAdminGroupPostRequest
     */
    'members'?: Array<ApiAdminGroupPostRequestMembersInner>;
}
/**
 * 
 * @export
 * @interface ApiAdminGroupPostRequestMembersInner
 */
export interface ApiAdminGroupPostRequestMembersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupPostRequestMembersInner
     */
    'member_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminGroupPostRequestMembersInner
     */
    'member_student_id'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminLoginPost200Response
 */
export interface ApiAdminLoginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminLoginPost200Response
     */
    'jwt_token'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminLoginPost400Response
 */
export interface ApiAdminLoginPost400Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminLoginPost400Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ApiAdminLoginPostRequest
 */
export interface ApiAdminLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminLoginPostRequest
     */
    'ta_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminLoginPostRequest
     */
    'ta_password'?: string;
}
/**
 * 
 * @export
 * @interface ApiUserGroupGet200Response
 */
export interface ApiUserGroupGet200Response {
    /**
     * 
     * @type {Array<ApiUserGroupGet200ResponseGroupsInner>}
     * @memberof ApiUserGroupGet200Response
     */
    'groups'?: Array<ApiUserGroupGet200ResponseGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiUserGroupGet200ResponseGroupsInner
 */
export interface ApiUserGroupGet200ResponseGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiUserGroupGet200ResponseGroupsInner
     */
    'big_group'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiUserGroupGet200ResponseGroupsInner
     */
    'group_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiUserGroupGet200ResponseGroupsInner
     */
    'group_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUserGroupGet200ResponseGroupsInner
     */
    'leader_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUserGroupGet200ResponseGroupsInner
     */
    'leader_student_id'?: string;
    /**
     * 
     * @type {Array<ApiAdminGroupGet200ResponseGroupsInnerMembersInner>}
     * @memberof ApiUserGroupGet200ResponseGroupsInner
     */
    'members'?: Array<ApiAdminGroupGet200ResponseGroupsInnerMembersInner>;
    /**
     * Map of student IDs who have graded
     * @type {{ [key: string]: boolean; }}
     * @memberof ApiUserGroupGet200ResponseGroupsInner
     */
    'graded_student_id'?: { [key: string]: boolean; };
}
/**
 * 
 * @export
 * @interface ApiUserGroupGradePostRequest
 */
export interface ApiUserGroupGradePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUserGroupGradePostRequest
     */
    'big_group'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiUserGroupGradePostRequest
     */
    'group_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiUserGroupGradePostRequest
     */
    'grade'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiUserGroupGradePostRequest
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface ApiUserLoginPostRequest
 */
export interface ApiUserLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUserLoginPostRequest
     */
    'student_id'?: string;
}
/**
 * 
 * @export
 * @interface ApiUserTotpInitBeginGet200Response
 */
export interface ApiUserTotpInitBeginGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiUserTotpInitBeginGet200Response
     */
    'qr_code'?: string;
}
/**
 * 
 * @export
 * @interface ApiUserTotpInitFinishPostRequest
 */
export interface ApiUserTotpInitFinishPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUserTotpInitFinishPostRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ApiUserTotpPostRequest
 */
export interface ApiUserTotpPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiUserTotpPostRequest
     */
    'code'?: string;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Big Group
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupBigDelete: async (apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAdminGroupBigPostRequest' is not null or undefined
            assertParamExists('apiAdminGroupBigDelete', 'apiAdminGroupBigPostRequest', apiAdminGroupBigPostRequest)
            const localVarPath = `/api/admin/group/big`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminGroupBigPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Big Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupBigGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/group/big`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Big Group
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupBigPost: async (apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAdminGroupBigPostRequest' is not null or undefined
            assertParamExists('apiAdminGroupBigPost', 'apiAdminGroupBigPostRequest', apiAdminGroupBigPostRequest)
            const localVarPath = `/api/admin/group/big`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminGroupBigPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Group
         * @param {ApiAdminGroupDeleteRequest} apiAdminGroupDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupDelete: async (apiAdminGroupDeleteRequest: ApiAdminGroupDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAdminGroupDeleteRequest' is not null or undefined
            assertParamExists('apiAdminGroupDelete', 'apiAdminGroupDeleteRequest', apiAdminGroupDeleteRequest)
            const localVarPath = `/api/admin/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminGroupDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Admin Group Information
         * @param {string} bigGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupGet: async (bigGroup: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bigGroup' is not null or undefined
            assertParamExists('apiAdminGroupGet', 'bigGroup', bigGroup)
            const localVarPath = `/api/admin/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (bigGroup !== undefined) {
                localVarQueryParameter['big_group'] = bigGroup;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Group Grades
         * @param {ApiAdminGroupDeleteRequest} apiAdminGroupDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupGradeGet: async (apiAdminGroupDeleteRequest: ApiAdminGroupDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAdminGroupDeleteRequest' is not null or undefined
            assertParamExists('apiAdminGroupGradeGet', 'apiAdminGroupDeleteRequest', apiAdminGroupDeleteRequest)
            const localVarPath = `/api/admin/group/grade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminGroupDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Group
         * @param {ApiAdminGroupPostRequest} apiAdminGroupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupPost: async (apiAdminGroupPostRequest: ApiAdminGroupPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAdminGroupPostRequest' is not null or undefined
            assertParamExists('apiAdminGroupPost', 'apiAdminGroupPostRequest', apiAdminGroupPostRequest)
            const localVarPath = `/api/admin/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminGroupPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Admin Login
         * @param {ApiAdminLoginPostRequest} apiAdminLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminLoginPost: async (apiAdminLoginPostRequest: ApiAdminLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAdminLoginPostRequest' is not null or undefined
            assertParamExists('apiAdminLoginPost', 'apiAdminLoginPostRequest', apiAdminLoginPostRequest)
            const localVarPath = `/api/admin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Big Group
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminGroupBigDelete(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupBigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminGroupBigDelete(apiAdminGroupBigPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminGroupBigDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Big Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminGroupBigGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupBigGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminGroupBigGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminGroupBigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add Big Group
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminGroupBigPost(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupBigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminGroupBigPost(apiAdminGroupBigPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminGroupBigPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Group
         * @param {ApiAdminGroupDeleteRequest} apiAdminGroupDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminGroupDelete(apiAdminGroupDeleteRequest: ApiAdminGroupDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminGroupDelete(apiAdminGroupDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminGroupDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Admin Group Information
         * @param {string} bigGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminGroupGet(bigGroup: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminGroupGet(bigGroup, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminGroupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Group Grades
         * @param {ApiAdminGroupDeleteRequest} apiAdminGroupDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminGroupGradeGet(apiAdminGroupDeleteRequest: ApiAdminGroupDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupGradeGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminGroupGradeGet(apiAdminGroupDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminGroupGradeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add Group
         * @param {ApiAdminGroupPostRequest} apiAdminGroupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminGroupPost(apiAdminGroupPostRequest: ApiAdminGroupPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminGroupPost(apiAdminGroupPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminGroupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Admin Login
         * @param {ApiAdminLoginPostRequest} apiAdminLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminLoginPost(apiAdminLoginPostRequest: ApiAdminLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminLoginPost(apiAdminLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.apiAdminLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Big Group
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupBigDelete(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupBigPost200Response> {
            return localVarFp.apiAdminGroupBigDelete(apiAdminGroupBigPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Big Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupBigGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupBigGet200Response> {
            return localVarFp.apiAdminGroupBigGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Big Group
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupBigPost(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupBigPost200Response> {
            return localVarFp.apiAdminGroupBigPost(apiAdminGroupBigPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Group
         * @param {ApiAdminGroupDeleteRequest} apiAdminGroupDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupDelete(apiAdminGroupDeleteRequest: ApiAdminGroupDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupDelete200Response> {
            return localVarFp.apiAdminGroupDelete(apiAdminGroupDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Admin Group Information
         * @param {string} bigGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupGet(bigGroup: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupGet200Response> {
            return localVarFp.apiAdminGroupGet(bigGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Group Grades
         * @param {ApiAdminGroupDeleteRequest} apiAdminGroupDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupGradeGet(apiAdminGroupDeleteRequest: ApiAdminGroupDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupGradeGet200Response> {
            return localVarFp.apiAdminGroupGradeGet(apiAdminGroupDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Group
         * @param {ApiAdminGroupPostRequest} apiAdminGroupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminGroupPost(apiAdminGroupPostRequest: ApiAdminGroupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupPost200Response> {
            return localVarFp.apiAdminGroupPost(apiAdminGroupPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Admin Login
         * @param {ApiAdminLoginPostRequest} apiAdminLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminLoginPost(apiAdminLoginPostRequest: ApiAdminLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminLoginPost200Response> {
            return localVarFp.apiAdminLoginPost(apiAdminLoginPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * 
     * @summary Delete Big Group
     * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminGroupBigDelete(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminGroupBigDelete(apiAdminGroupBigPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Big Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminGroupBigGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminGroupBigGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Big Group
     * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminGroupBigPost(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminGroupBigPost(apiAdminGroupBigPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Group
     * @param {ApiAdminGroupDeleteRequest} apiAdminGroupDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminGroupDelete(apiAdminGroupDeleteRequest: ApiAdminGroupDeleteRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminGroupDelete(apiAdminGroupDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Admin Group Information
     * @param {string} bigGroup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminGroupGet(bigGroup: string, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminGroupGet(bigGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Group Grades
     * @param {ApiAdminGroupDeleteRequest} apiAdminGroupDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminGroupGradeGet(apiAdminGroupDeleteRequest: ApiAdminGroupDeleteRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminGroupGradeGet(apiAdminGroupDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Group
     * @param {ApiAdminGroupPostRequest} apiAdminGroupPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminGroupPost(apiAdminGroupPostRequest: ApiAdminGroupPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminGroupPost(apiAdminGroupPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Admin Login
     * @param {ApiAdminLoginPostRequest} apiAdminLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public apiAdminLoginPost(apiAdminLoginPostRequest: ApiAdminLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).apiAdminLoginPost(apiAdminLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get User Big Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGroupBigGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/group/big`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Groups
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGroupGet: async (apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAdminGroupBigPostRequest' is not null or undefined
            assertParamExists('apiUserGroupGet', 'apiAdminGroupBigPostRequest', apiAdminGroupBigPostRequest)
            const localVarPath = `/api/user/group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminGroupBigPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Group Grade
         * @param {ApiUserGroupGradePostRequest} apiUserGroupGradePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGroupGradePost: async (apiUserGroupGradePostRequest: ApiUserGroupGradePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserGroupGradePostRequest' is not null or undefined
            assertParamExists('apiUserGroupGradePost', 'apiUserGroupGradePostRequest', apiUserGroupGradePostRequest)
            const localVarPath = `/api/user/group/grade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserGroupGradePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User Login
         * @param {ApiUserLoginPostRequest} apiUserLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginPost: async (apiUserLoginPostRequest: ApiUserLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserLoginPostRequest' is not null or undefined
            assertParamExists('apiUserLoginPost', 'apiUserLoginPostRequest', apiUserLoginPostRequest)
            const localVarPath = `/api/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Begin TOTP Initialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTotpInitBeginGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/totp/init/begin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finish TOTP Initialization
         * @param {ApiUserTotpInitFinishPostRequest} apiUserTotpInitFinishPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTotpInitFinishPost: async (apiUserTotpInitFinishPostRequest: ApiUserTotpInitFinishPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserTotpInitFinishPostRequest' is not null or undefined
            assertParamExists('apiUserTotpInitFinishPost', 'apiUserTotpInitFinishPostRequest', apiUserTotpInitFinishPostRequest)
            const localVarPath = `/api/user/totp/init/finish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserTotpInitFinishPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify TOTP Code
         * @param {ApiUserTotpPostRequest} apiUserTotpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTotpPost: async (apiUserTotpPostRequest: ApiUserTotpPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserTotpPostRequest' is not null or undefined
            assertParamExists('apiUserTotpPost', 'apiUserTotpPostRequest', apiUserTotpPostRequest)
            const localVarPath = `/api/user/totp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserTotpPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get User Big Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGroupBigGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupBigGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGroupBigGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGroupBigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User Groups
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGroupGet(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserGroupGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGroupGet(apiAdminGroupBigPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGroupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add Group Grade
         * @param {ApiUserGroupGradePostRequest} apiUserGroupGradePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserGroupGradePost(apiUserGroupGradePostRequest: ApiUserGroupGradePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupBigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserGroupGradePost(apiUserGroupGradePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserGroupGradePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User Login
         * @param {ApiUserLoginPostRequest} apiUserLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserLoginPost(apiUserLoginPostRequest: ApiUserLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserLoginPost(apiUserLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Begin TOTP Initialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTotpInitBeginGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserTotpInitBeginGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTotpInitBeginGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserTotpInitBeginGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Finish TOTP Initialization
         * @param {ApiUserTotpInitFinishPostRequest} apiUserTotpInitFinishPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTotpInitFinishPost(apiUserTotpInitFinishPostRequest: ApiUserTotpInitFinishPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminGroupBigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTotpInitFinishPost(apiUserTotpInitFinishPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserTotpInitFinishPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Verify TOTP Code
         * @param {ApiUserTotpPostRequest} apiUserTotpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUserTotpPost(apiUserTotpPostRequest: ApiUserTotpPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAdminLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUserTotpPost(apiUserTotpPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.apiUserTotpPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Get User Big Groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGroupBigGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupBigGet200Response> {
            return localVarFp.apiUserGroupBigGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Groups
         * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGroupGet(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiUserGroupGet200Response> {
            return localVarFp.apiUserGroupGet(apiAdminGroupBigPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Group Grade
         * @param {ApiUserGroupGradePostRequest} apiUserGroupGradePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGroupGradePost(apiUserGroupGradePostRequest: ApiUserGroupGradePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupBigPost200Response> {
            return localVarFp.apiUserGroupGradePost(apiUserGroupGradePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User Login
         * @param {ApiUserLoginPostRequest} apiUserLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginPost(apiUserLoginPostRequest: ApiUserLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminLoginPost200Response> {
            return localVarFp.apiUserLoginPost(apiUserLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Begin TOTP Initialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTotpInitBeginGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiUserTotpInitBeginGet200Response> {
            return localVarFp.apiUserTotpInitBeginGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finish TOTP Initialization
         * @param {ApiUserTotpInitFinishPostRequest} apiUserTotpInitFinishPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTotpInitFinishPost(apiUserTotpInitFinishPostRequest: ApiUserTotpInitFinishPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminGroupBigPost200Response> {
            return localVarFp.apiUserTotpInitFinishPost(apiUserTotpInitFinishPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify TOTP Code
         * @param {ApiUserTotpPostRequest} apiUserTotpPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserTotpPost(apiUserTotpPostRequest: ApiUserTotpPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAdminLoginPost200Response> {
            return localVarFp.apiUserTotpPost(apiUserTotpPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Get User Big Groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGroupBigGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGroupBigGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Groups
     * @param {ApiAdminGroupBigPostRequest} apiAdminGroupBigPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGroupGet(apiAdminGroupBigPostRequest: ApiAdminGroupBigPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGroupGet(apiAdminGroupBigPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Group Grade
     * @param {ApiUserGroupGradePostRequest} apiUserGroupGradePostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGroupGradePost(apiUserGroupGradePostRequest: ApiUserGroupGradePostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserGroupGradePost(apiUserGroupGradePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User Login
     * @param {ApiUserLoginPostRequest} apiUserLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserLoginPost(apiUserLoginPostRequest: ApiUserLoginPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserLoginPost(apiUserLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Begin TOTP Initialization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserTotpInitBeginGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserTotpInitBeginGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finish TOTP Initialization
     * @param {ApiUserTotpInitFinishPostRequest} apiUserTotpInitFinishPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserTotpInitFinishPost(apiUserTotpInitFinishPostRequest: ApiUserTotpInitFinishPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserTotpInitFinishPost(apiUserTotpInitFinishPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify TOTP Code
     * @param {ApiUserTotpPostRequest} apiUserTotpPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserTotpPost(apiUserTotpPostRequest: ApiUserTotpPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUserTotpPost(apiUserTotpPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



